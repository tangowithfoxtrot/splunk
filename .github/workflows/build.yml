---
name: Build

on:
  push:
    branches-ignore:
      - 'l10n_master'
      - 'gh-pages'
  workflow_dispatch:

jobs:
  cloc:
    name: CLOC
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b

      - name: Install cloc
        run: |
          sudo apt-get update
          sudo apt-get -y install cloc
      - name: Print lines of code
        run: cloc --include-lang C#,PowerShell,CSS,JavaScript,XML --vcs git


  build-artifacts:
    name: Build artifacts
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - runtime_identifier: win-x86
          - runtime_identifier: win-x64
          - runtime_identifier: linux-x64
          - runtime_identifier: linux-musl-x64
          - runtime_identifier: linux-arm
          - runtime_identifier: linux-arm64
          - runtime_identifier: osx-x64
          - runtime_identifier: osx.11.0-arm64
          - runtime_identifier: osx.12-arm64
    steps:
      - name: Checkout repo
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b

      - name: Print environment
        run: |
          dotnet --info
          echo "GitHub ref: $GITHUB_REF"
          echo "GitHub event: $GITHUB_EVENT"

      - name: Restore/Clean service
        run: |
          echo "Restore"
          dotnet restore
          echo "Clean"
          dotnet clean -c "Release"

      - name: Build Splunk App
        env:
          APP_OUT: build/bitwarden_event_logs
          BIN_OUT: build/bitwarden_event_logs/bin
          LIB_OUT: build/bitwarden_event_logs/lib/Bitwarden_Splunk
          RUNTIME_IDENTIFIER: ${{ matrix.runtime_identifier }}
        run: |
          # Create directories
          mkdir -p ${BIN_OUT}
          mkdir -p ${LIB_OUT}

          # Copy required files
          cp -R app/bitwarden_event_logs/* ${APP_OUT}
          cp -R src/Splunk/* ${LIB_OUT}

          # Build app
          dotnet publish -c Release -o "${BIN_OUT}" -r "${RUNTIME_IDENTIFIER}"

          # Clean up files
          rm -rf ${LIB_OUT}/bin
          rm -rf ${LIB_OUT}/obj

          # Create tar archive
          tar -cvzf bitwarden_event_logs_${RUNTIME_IDENTIFIER}.tar.gz -C build bitwarden_event_logs

          ls -alh .
          ls -alh ./build

      - name: Fix inputs config on Windows
        if: ${{ startsWith( matrix.runtime_identifier, 'win') }}
        env:
          APP_OUT: build/bitwarden_event_logs
        run: sed -i 's/Bitwarden_Splunk/Bitwarden_Splunk.exe/' ${APP_OUT}/default/inputs.conf

      - name: Setup Python 3.9
        uses: actions/setup-python@b55428b1882923874294fa556849718a1d7f2ca5
        with:
          python-version: '3.9'

      - name: Validate artifact
        run: |
          wget https://download.splunk.com/misc/packaging-toolkit/splunk-packaging-toolkit-1.0.1.tar.gz
          pip install splunk-packaging-toolkit-1.0.1.tar.gz
          slim validate bitwarden_event_logs_${{ matrix.runtime_identifier }}.tar.gz 2>&1 | tee output.txt
          echo "*********"
          grep "\[WARNING\]" "output.txt"
          echo "*********"
          if grep -q "[WARNING]" "output.txt"; then
            echo "WARNING(s) found."
          elif grep -q "[ERROR]" "output.txt"; then
            echo "ERROR(s) found."
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535
        with:
          name: bitwarden_event_logs_${{ matrix.runtime_identifier }}.tar.gz
          path: bitwarden_event_logs_${{ matrix.runtime_identifier }}.tar.gz
          if-no-files-found: error


  check-failures:
    name: Check for failures
    if: always()
    runs-on: ubuntu-22.04
    needs:
      - cloc
      - build-artifacts
    steps:
      - name: Check if any job failed
        if: |
          github.ref == 'refs/heads/master'
          || github.ref == 'refs/heads/rc'
          || github.ref == 'refs/heads/hotfix-rc'
        env:
          CLOC_STATUS: ${{ needs.cloc.result }}
          BUILD_ARTIFACTS_STATUS: ${{ needs.build-artifacts.result }}
        run: |
          if [ "$CLOC_STATUS" = "failure" ]; then
              exit 1
          elif [ "$BUILD_ARTIFACTS_STATUS" = "failure" ]; then
              exit 1
          fi

      - name: Login to Azure - Prod Subscription
        uses: Azure/login@1f63701bf3e6892515f1b7ce2d2bf1708b46beaf
        if: failure()
        with:
          creds: ${{ secrets.AZURE_PROD_KV_CREDENTIALS }}

      - name: Retrieve secrets
        id: retrieve-secrets
        uses: Azure/get-keyvault-secrets@b5c723b9ac7870c022b8c35befe620b7009b336f
        if: failure()
        with:
          keyvault: "bitwarden-prod-kv"
          secrets: "devops-alerts-slack-webhook-url"

      - name: Notify Slack on failure
        uses: act10ns/slack@da3191ebe2e67f49b46880b4633f5591a96d1d33  # v1.2.2
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ steps.retrieve-secrets.outputs.devops-alerts-slack-webhook-url }}
        with:
          status: ${{ job.status }}
